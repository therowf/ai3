{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","porps","state","isauto","handleStart","bind","handleStop","fget","complete","status","this","setState","props","setInterval","console","log","e","navigator","mediaDevices","getUserMedia","audio","then","stream","catch","err","className","startSpeechRecognition","onError","continuous","results","formattedResults","transcripts","error","length","join","onClick","id","text","src","logo","alt","href","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"yTA0FeA,E,kDAnFd,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CAACC,QAAO,GACrB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,KAAO,CAACC,UAAS,EAAOC,QAAO,GALpB,E,0DASfC,KAAKC,UAAS,SAACT,EAAOU,GACpB,MAAO,CAACT,QAAQ,Q,6BAGf,IAAD,OACJU,aAAY,WACP,EAAKN,KAAKC,WACX,EAAKF,aACLQ,QAAQC,IAAI,EAAKR,KAAKE,QACtB,EAAKL,iBAEN,O,iCAGQY,GACTN,KAAKC,UAAS,SAACT,EAAOU,GACpB,MAAO,CAACT,QAAQ,Q,0CAKpBc,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAC5CC,MAAK,SAASC,GACbR,QAAQC,IAAI,+BAEbQ,OAAM,SAASC,GACdV,QAAQC,IAAI,wB,+BAMd,OACE,yBAAKU,UAAU,OAEhB,4BAAQA,UAAU,cAElB,kBAAC,mBAAD,CACKC,uBAAwBhB,KAAKR,MAAMC,OACnCwB,QAASjB,KAAKiB,QACdC,YAAY,IAET,YAA6D,EAA3DnB,OAA2D,EAAnDoB,QAAoD,IAA3CC,EAA0C,EAA1CA,iBAAkBC,EAAwB,EAAxBA,YAAwB,EAAXC,MAEjD,OADAlB,QAAQC,IAAIe,GAEV,oCACGC,GAAeA,EAAYE,QAAU,2BAAIF,EAAYG,KAAK,WAKrE,4BAAQC,QAASzB,KAAKN,aAAtB,SACA,4BAAQ+B,QAASzB,KAAKJ,YAAtB,QAEE,wBAAI8B,GAAG,OAAP,eACA,kBAAC,IAAD,CAAQC,KAAK,gEAEb,yBAAKC,IAAKC,IAAMd,UAAU,WAAWe,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEf,UAAU,WACVgB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,qB,GAvEUC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBtC,WACrBA,UAAUuC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAS,GACLlB,QAAQkB,MAAMA,EAAM4B,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.b9ebedf9.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Speech from 'react-speech';\nimport { SpeechRecognizer } from 'react-speech-recognizer-component';\nclass App extends React.Component{\n constructor(porps){\n   super(porps)\n   this.state = {isauto:false}\n   this.handleStart = this.handleStart.bind(this)\n   this.handleStop = this.handleStop.bind(this)\n   this.fget = {complete:false, status:false}\n }\n  handleStart(){\n\n    this.setState((state, props) => {\n      return {isauto: true};\n    });\n}\nrefe(){\n  setInterval(() => {\n    if(this.fget.complete){\n      this.handleStop();\n      console.log(this.fget.status)\n      this.handleStart();\n    }\n  }, 1000);\n}\n\n  handleStop(e){\n    this.setState((state, props) => {\n      return {isauto: false};\n    });\n}\n\ncomponentDidMount(){\n  navigator.mediaDevices.getUserMedia({ audio: true })\n  .then(function(stream) {\n    console.log('You let me use your mic!')\n  })\n  .catch(function(err) {\n    console.log('No mic for you!')\n  });\n  \n}\n\n  render() {\n  return (\n    <div className=\"App\">\n\n   <header className=\"App-header\">\n   \n   <SpeechRecognizer\n        startSpeechRecognition={this.state.isauto}\n        onError={this.onError}\n        continuous={true}\n      >\n          {({status, results, formattedResults, transcripts, error}) => {\n            console.log(formattedResults)\n            return (\n              <>\n                {transcripts && transcripts.length && <p>{transcripts.join(', ')}</p>}\n              </>\n            );\n          }}\n      </SpeechRecognizer>\n      <button onClick={this.handleStart}>start</button>\n      <button onClick={this.handleStop}>stop</button>\n      \n        <h3 id=\"nod\">AutoSpeeker</h3>\n        <Speech text=\"This will work if you want, but please be wait to get more.\" />\n\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}